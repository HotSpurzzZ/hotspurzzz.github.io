<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HotSpurzzZ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-09T08:23:45.624Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HotSpurzzZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shellphish-fuzzer环境搭建</title>
    <link href="http://example.com/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-11-09T08:00:00.000Z</published>
    <updated>2021-11-09T08:23:45.624Z</updated>
    
    <content type="html"><![CDATA[<p>搭建shellphish-fuzzer环境，用于python调用AFL<br>环境：Docker—ubuntu18.04<br>python版本：3.6.9</p><span id="more"></span><p>注：由于个人网络问题，github源使用的<code>https://github.com.cnpmjs.org</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">    apt-get upgrade -y &amp;&amp; \</span><br><span class="line">    apt-get autoremove -y &amp;&amp; \</span><br><span class="line">    apt-get install -y \</span><br><span class="line">        curl \</span><br><span class="line">        gdb \</span><br><span class="line">        wget \</span><br><span class="line">        git \</span><br><span class="line">        vim</span><br></pre></td></tr></table></figure><p>换源：</p><p><code>vim /etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>shellphish-fuzzer的安装：</p><p><code>apt-get install build-essential gcc-multilib libtool automake autoconf bison debootstrap debian-archive-keyring libtool-bin</code></p><p><code>apt-get build-dep qemu</code></p><p>由于没有pip，先安装pip3：</p><p><code>apt-get install python3-pip</code></p><p>安装angr</p><p><code>pip3 install angr</code></p><p>安装driller</p><p><code>pip3 install git+https://github.com.cnpmjs.org/angr/tracer</code></p><p><code>pip3 install git+https://github.com.cnpmjs.org/shellphish/driller</code></p><p>安装afl（可选）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir afl-latest</span><br><span class="line"><span class="built_in">cd</span> afl-latest</span><br><span class="line">wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz</span><br><span class="line">tar xf afl-latest.tgz</span><br><span class="line"><span class="built_in">cd</span> afl-2.52b</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cd</span> qemu_mode</span><br><span class="line">wget -O patches/memfd.diff https://salsa.debian.org/qemu-team/qemu/raw/ubuntu-bionic-2.11/debian/patches/ubuntu/lp1753826-memfd-fix-configure-test.patch</span><br><span class="line">sed -i <span class="string">&#x27;/syscall.diff/a patch -p1 &lt;../patches/memfd.diff || exit 1&#x27;</span> build_qemu_support.sh</span><br><span class="line">./build_qemu_support.sh</span><br></pre></td></tr></table></figure><p>安装shellphish-afl</p><p><code>pip3 install git+https://github.com.cnpmjs.org/shellphish/shellphish-afl</code></p><p>但我使用这种方法会报错</p><p>于是我选择clone下来，执行setup.py</p><p><code>git clone[https://github.com.cnpmjs.org/shellphish/shellphish-afl.git](https://github.com.cnpmjs.org/shellphish/shellphish-afl.git)</code></p><p><code>cd shellphish-afl/</code></p><p><code>python3 [setup.py](http://setup.py/) install</code></p><p>安装fuzzer</p><p><code>pip3 install git+https://github.com.cnpmjs.org/shellphish/fuzzer</code></p><p>测试：</p><p><code>shellphuzz --help</code></p><p><img src="/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Untitled.png"></p><p><img src="/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Untitled%201.png"></p><p>参考链接：</p><p><a href="https://github.com/shellphish/fuzzer">https://github.com/shellphish/fuzzer</a></p><p><a href="https://github.com/shellphish/shellphish-afl">https://github.com/shellphish/shellphish-afl</a></p><p><a href="https://blog.grimm-co.com/2020/05/guided-fuzzing-with-driller.html">https://blog.grimm-co.com/2020/05/guided-fuzzing-with-driller.html</a></p><p>附Dockerfile：</p><p><a href="Dockerfile.txt">Dockerfile</a></p>]]></content>
    
    
    <summary type="html">搭建shellphish-fuzzer环境，用于python调用AFL</summary>
    
    
    
    <category term="Fuzzing" scheme="http://example.com/categories/Fuzzing/"/>
    
    
    <category term="Fuzz" scheme="http://example.com/tags/Fuzz/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="AEG" scheme="http://example.com/tags/AEG/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell反混淆学习</title>
    <link href="http://example.com/2021/11/01/PowerShell%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    <id>http://example.com/2021/11/01/PowerShell%E5%8F%8D%E6%B7%B7%E6%B7%86/</id>
    <published>2021-11-01T08:01:18.000Z</published>
    <updated>2021-11-09T08:33:52.801Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-PowerShell"><a href="#1-PowerShell" class="headerlink" title="1 PowerShell"></a>1 PowerShell</h1><p>PowerShell功能十分强大，其有很多优点：例如易于导入模块，能够访问核心API和远程命令，也正是由于这些优点使其成为攻击者执行无文件攻击的首选工具之一。</p><h1 id="2-常见混淆方式"><a href="#2-常见混淆方式" class="headerlink" title="2 常见混淆方式"></a>2 常见混淆方式</h1><p>例如：变换大小写、字符串分割、将变量插入命令语句中（最常见的是-f格式转换）、变量中增加反引号“`”、字符串之间添加空格、字符转换ASCII码、利用replace函数替换、base64加密等等……</p><p>如图所示：</p><p><img src="/2021/11/01/PowerShell%E5%8F%8D%E6%B7%B7%E6%B7%86/Untitled.png"></p><h2 id="2-1-人工去混淆"><a href="#2-1-人工去混淆" class="headerlink" title="2.1 人工去混淆"></a>2.1 人工去混淆</h2><p>先通过几个例子来了解PowerShell样本例子来了解去混淆的方式</p><h3 id="2-1-1-iex"><a href="#2-1-1-iex" class="headerlink" title="2.1.1 iex"></a>2.1.1 iex</h3><p>例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.( <span class="variable">$SHEllID</span>[<span class="number">1</span>]+<span class="variable">$shEllid</span>[<span class="number">13</span>]+<span class="string">&#x27;x&#x27;</span>) (( <span class="string">&#x27;118&amp;105N64J100J25V19J4&amp;5&amp;26~25f3&amp;25N64G64C100~4f5_30C15Z25~64~67f9G56Z47C43N62V47f46V106Z37~36V112~106&amp;67&amp;114V101_120V120~101N120C122&amp;123_126V64V67&amp;9N56Z47_43~62_47C46C106C40J51G112&amp;106&amp;67~11N46G43V39V106C8C47Z56J62_56J43N39Z64J67C12_35f38f47G36G43C39Z47f112N67&amp;67&amp;64C67N9f56N47~46G35~62G57N112~67N67J64C67Z24&amp;47N59G63C35C56V47J39J47J36Z62f57_112G67N64J67J30G37N46_37V57~112_67&amp;67~67Z67f64C100J15f18f11V7Z26&amp;6V15&amp;64V67~64C100~15~18N11G7C26_6_15&amp;64&amp;67Z64&amp;100V26_11f24G11C7~15f30N15f24C106&amp;26~11G24~11V7G123G64_106_67f64N100V26&amp;11Z24C11&amp;7V15Z30_15N24&amp;106&amp;26~11V24J11J7_120&amp;64&amp;67_64f105Z116J64~17N9f39~46V38C47&amp;62C8Z35~36G46C35Z36&amp;45f98C14f47f44~43C63~38N62~26C43_56~43G39G47G62G47N56V25&amp;47C62V4_43&amp;39_47J106f119G106Z109G36~43J39~47~109C99J23Z64_17_5_63V62_58G63Z62~30_51Z58J47&amp;98_109V25G51C57Z62V47G39V100N7N43&amp;36Z43f45G47J39Z47G36N62V100N11&amp;63&amp;62V37G39f43C62Z35&amp;37~36V100f26N25f9C63C57J62C37f39N5V40f32&amp;47N41&amp;62J109~99G23_64&amp;58N43f56C43G39f106J98G64G67V17G26_43&amp;56&amp;43N39Z47~62C47C56N98f26Z43V56&amp;43C39Z47f62J47&amp;56Z25J47~62C4f43&amp;39&amp;47~106C119_106Z109&amp;36&amp;43f39N47~109f102V64G67~67Z7_43N36N46_43~62J37J56V51Z102_64G67V67G28~43C38f63N47V12_56V37&amp;39V26f35_58Z47V38N35~36J47_102Z64N67J67&amp;28Z43&amp;38V63Z47_12V56~37J39G26G35J58~47G38N35N36G47&amp;8G51C26J56~37~58N47&amp;56_62J51&amp;4J43&amp;39N47J99J23N64&amp;67&amp;17C28_43C38V35J46C43N62V47&amp;25_47_62f98J104G30C37_39&amp;104J102V104J14G35G41J33V104Z102f104~0N43Z36f47~104_99_23C64Z67Z17J28~43N38f35G46G43G62f47_24_43N36J45G47Z98J120f123V102~124C127N99_23~64Z67_17N28f43_38f35J46C43&amp;62C47~25&amp;41G56_35N58&amp;62Z98G49G30&amp;47J57J62N103N26&amp;43~62f34C106&amp;110C21C106Z103Z26_43Z62N34J30_51N58Z47G106Z109N9C37~36&amp;62&amp;43_35_36J47&amp;56f109_55V99&amp;23_106~64Z67J17C28V43_38_35J46G43f62_47J4Z37J62V4V63G38Z38C5C56&amp;15N39G58_62C51V98Z99_23f64V67_17~28Z43f38C35C46f43G62_47~9V37_63G36J62J98_123Z102~127_99C23V64f67V17J28V43C38G35G46V43N62G47J6Z47V36V45~62N34C98V123V102f123Z122&amp;99G23N64G67&amp;17J28_43Z38Z35~46&amp;43V62V47V26N43~62C62G47N56N36&amp;98Z99&amp;23C64V67C17f57f62f56G35J36_45V23C110C9N37_39C58V63C62~47C56G36C43Z39f47f106V119_106V109V14N15C12~11&amp;31&amp;6J30_28C11C6C31V15_109V64_99_64&amp;64C40N47J45f35_36Z106_49_64_67V110&amp;15f56N56~37_56f11C41&amp;62C35J37C36V26C56_47V44f47J56N47N36V41V47J106f119Z106~17_25f51J57J62G47J39V100~7G43J36Z43C45C47J39&amp;47~36C62~100_11V63N62G37C39~43C62Z35&amp;37f36J100N11~41C62Z35f37&amp;36G26J56&amp;47G44~47f56C47~36f41V47G23Z112~112N25C62Z37N58V64f67V25Z47f62J103C25N62J56G35_41J62G7Z37J46J47f106J103Z28f47J56_57_35C37V36C106G6C43&amp;62_47f57N62G64J67_62V56G51J106N49V64&amp;67G67V64Z67_55f106J41V43C62C41~34J106&amp;49C64~67~67J29~56G35C62_47&amp;103&amp;15V56G56G37V56f106C110G21_100&amp;15N50G41~47f58V62_35V37C36C100V7Z47V57f57Z43C45_47&amp;64G67G55G64G55f64f64Z58G56J37G41&amp;47N57f57G106f49~64~67f62_56Z51Z106J49J64_67G67C64N67V55~106_41N43J62~41V34Z106_49G64&amp;67_67N29Z56&amp;35&amp;62&amp;47C103V15_56f56Z37C56C106f110C21&amp;100f15_50Z41~47C58N62C35&amp;37C36_100V7&amp;47G57N57_43&amp;45G47N67f64N67V55J64Z106G106_106C106_64C55f64~64~47G36J46C106N49Z64Z67_62J56C51C106&amp;49G64_67Z67Z64V67~55C106Z41C43f62C41J34f106Z49Z64Z67f67J29C56J35Z62~47&amp;103N15N56_56&amp;37N56&amp;106&amp;110V21_100f15Z50V41N47Z58_62V35~37~36J100Z7J47J57J57N43f45C47~64G67G55V64Z55J64&#x27;</span><span class="operator">-Split</span><span class="string">&#x27;&amp;&#x27;</span><span class="operator">-spLIt</span><span class="string">&#x27;~&#x27;</span> <span class="operator">-SpliT</span> <span class="string">&#x27;_&#x27;</span><span class="operator">-spLIt</span> <span class="string">&#x27;v&#x27;</span><span class="operator">-SpLIt</span><span class="string">&#x27;z&#x27;</span> <span class="operator">-sPLiT</span> <span class="string">&#x27;C&#x27;</span> <span class="operator">-spLit</span><span class="string">&#x27;n&#x27;</span><span class="operator">-spLit</span> <span class="string">&#x27;J&#x27;</span> <span class="operator">-SPLIT</span><span class="string">&#x27;f&#x27;</span><span class="operator">-spLIt</span> <span class="string">&#x27;g&#x27;</span>| <span class="keyword">FoREacH</span> &#123;[<span class="built_in">chAR</span>] (<span class="variable">$_</span> <span class="operator">-bXor</span><span class="string">&quot;0x4a&quot;</span>) &#125;) <span class="operator">-joIN</span><span class="string">&#x27;&#x27;</span> </span><br></pre></td></tr></table></figure><p>中间都是被混淆了的代码，前后各有一小段代码。</p><p>后面的代码大致是进行了分割与异或操作，</p><p>前面的是<code>$SHEllID[1]+$shEllid[13]+&#39;x&#39;</code>，这里的$是PowerShell的操作符，可以将字符串作为命令执行，那么<code>$SHEllID</code>是什么呢，可以在PowerShell中查看：</p><p><img src="/2021/11/01/PowerShell%E5%8F%8D%E6%B7%B7%E6%B7%86/Untitled%201.png"></p><p>也就是说，通过从<code>$SHEllID</code>这一系统变量中，提取到了i和e这两个字符，以这种混淆的方式拼接出了iex字符。</p><p><img src="/2021/11/01/PowerShell%E5%8F%8D%E6%B7%B7%E6%B7%86/Untitled%202.png"></p><p>iex全称为Invoke-Expression，PowerShell文档中对其的解释为：</p><p><img src="/2021/11/01/PowerShell%E5%8F%8D%E6%B7%B7%E6%B7%86/Untitled%203.png"></p><p>即iex用于将后面的字符串作为命令来执行；如果去掉iex，运行后就会得到原来的字符串。</p><p>如果用户没有对样本进行分析，而直接运行经过iex混淆后的恶意的指令，那么就会给用户带来麻烦，正因如此，我们需要对样本进行解混淆来得到明文代码。</p><p>于是我们可以将iex去掉，即这里的<code>.( $SHEllID[1]+$shEllid[13]+&#39;x&#39;)</code></p><p>并通过<code>./test.ps1 &gt; test_1.ps1</code>命令来运行去除iex后的脚本，从而得到明文：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;#</span></span><br><span class="line"><span class="comment"><span class="doctag">.SYNOPSIS</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.NOTES</span></span></span><br><span class="line"><span class="comment">Created on: 8/22/2014</span></span><br><span class="line"><span class="comment">Created by: Adam Bertram</span></span><br><span class="line"><span class="comment">Filename:</span></span><br><span class="line"><span class="comment">Credits:</span></span><br><span class="line"><span class="comment">Requirements:</span></span><br><span class="line"><span class="comment">Todos:</span></span><br><span class="line"><span class="comment"><span class="doctag">.EXAMPLE</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.EXAMPLE</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER PARAM1</span></span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER PARAM2</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#&gt;</span></span><br><span class="line">[<span class="type">CmdletBinding</span>(<span class="type">DefaultParameterSetName</span> = <span class="string">&#x27;name&#x27;</span>)]</span><br><span class="line"><span class="function">[<span class="type">OutputType</span>(<span class="string">&#x27;System.Management.Automation.PSCustomObject&#x27;</span>)]</span></span><br><span class="line"><span class="keyword">param</span> (</span><br><span class="line">[<span class="type">Parameter</span>(<span class="type">ParameterSetName</span> = <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line"><span class="type">Mandatory</span>,</span><br><span class="line"><span class="type">ValueFromPipeline</span>,</span><br><span class="line"><span class="type">ValueFromPipelineByPropertyName</span>)]</span><br><span class="line">[<span class="type">ValidateSet</span>(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Dick&quot;</span>,<span class="string">&quot;Jane&quot;</span>)]</span><br><span class="line">[<span class="type">ValidateRange</span>(<span class="number">21</span>,<span class="number">65</span>)]</span><br><span class="line">[<span class="type">ValidateScript</span>(&#123;<span class="built_in">Test-Path</span> <span class="variable">$_</span> -<span class="type">PathType</span> <span class="string">&#x27;Container&#x27;</span>&#125;)] </span><br><span class="line">[<span class="type">ValidateNotNullOrEmpty</span>()]</span><br><span class="line">[<span class="type">ValidateCount</span>(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">[<span class="type">ValidateLength</span>(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line">[<span class="type">ValidatePattern</span>()]</span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$Computername</span> = <span class="string">&#x27;DEFAULTVALUE&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span> &#123;</span><br><span class="line"><span class="variable">$ErrorActionPreference</span> = [<span class="type">System.Management.Automation.ActionPreference</span>]::Stop</span><br><span class="line"><span class="built_in">Set-StrictMode</span> <span class="literal">-Version</span> Latest</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="built_in">Write-Error</span> <span class="variable">$_</span>.Exception.Message</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="built_in">Write-Error</span> <span class="variable">$_</span>.Exception.Message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="built_in">Write-Error</span> <span class="variable">$_</span>.Exception.Message</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后打开test_1.ps1就能清晰地看到代码做了什么</p><p>iex存在许多种表达方式，一些常见的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IEX</span></span><br><span class="line"><span class="built_in">InVOKe-EXprESSiON</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">GV</span> <span class="string">&#x27;*MdR*&#x27;</span>).nAme[<span class="number">3</span>,<span class="number">11</span>,<span class="number">2</span>]<span class="operator">-Join</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">(vAriaBLe <span class="string">&#x27;*mdr*&#x27;</span>).naME[<span class="number">3</span>,<span class="number">11</span>,<span class="number">2</span>]<span class="operator">-JoIn</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">(<span class="built_in">geT-vAriaBLe</span> <span class="string">&#x27;*MdR*&#x27;</span>).NAmE[<span class="number">3</span>,<span class="number">11</span>,<span class="number">2</span>]<span class="operator">-JOIN</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$VERBOsEPREference</span>.TOstrING()[<span class="number">1</span>,<span class="number">3</span>]+<span class="string">&#x27;x&#x27;</span><span class="operator">-JOiN</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">([<span class="built_in">STRIng</span>]<span class="variable">$veRbOsePrEfErENCe</span>)[<span class="number">1</span>,<span class="number">3</span>]+<span class="string">&#x27;X&#x27;</span><span class="operator">-joIn</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$env:COMspEC</span>[<span class="number">4</span>,<span class="number">15</span>,<span class="number">25</span>]<span class="operator">-jOin</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="variable">$eNv:COmsPEc</span>[<span class="number">4</span>,<span class="number">24</span>,<span class="number">25</span>]<span class="operator">-joiN</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="variable">$eNv:COMSPeC</span>[<span class="number">4</span>,<span class="number">26</span>,<span class="number">25</span>]<span class="operator">-jOIN</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$SHEllID</span>[<span class="number">1</span>]+<span class="variable">$shEllid</span>[<span class="number">13</span>]+<span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$psHoME</span>[<span class="number">4</span>]+<span class="variable">$PShOmE</span>[<span class="number">30</span>]+<span class="string">&#x27;x&#x27;</span></span><br><span class="line"><span class="variable">$psHoME</span>[<span class="number">4</span>]+<span class="variable">$PsHOmE</span>[<span class="number">34</span>]+<span class="string">&#x27;X&#x27;</span></span><br><span class="line"><span class="variable">$psHomE</span>[<span class="number">21</span>]+<span class="variable">$pshOME</span>[<span class="number">30</span>]+<span class="string">&#x27;X&#x27;</span></span><br><span class="line"><span class="variable">$PSHoMe</span>[<span class="number">21</span>]+<span class="variable">$PsHOme</span>[<span class="number">34</span>]+<span class="string">&#x27;X&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，默认情况下，Windows PowerShell本身不区分大小写。因此这里iex的表示方法，大小写是随意的。</p><p>当然，我们也能发现，iex通常与一些运算符、操作符结合在一起使用，例如test.ps1中最开始的<code>.</code>运算符。</p><p>常见的与iex结合的运算符、操作符如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、属性引用运算符（点运算符）: .</span><br><span class="line">作用：通过点运算符访问对象的属性和方法</span><br><span class="line">例如：</span><br><span class="line">.( <span class="variable">$SHEllID</span>[<span class="number">1</span>]+<span class="variable">$shEllid</span>[<span class="number">13</span>]+<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、调用运算符: <span class="variable">$</span></span><br><span class="line">作用：可以将字符串直接解释成命令并执行</span><br><span class="line">例如：</span><br><span class="line">&amp; ((<span class="built_in">geT-vAriaBLe</span> <span class="string">&#x27;*MdR*&#x27;</span>).NAmE[<span class="number">3</span>,<span class="number">11</span>,<span class="number">2</span>]<span class="operator">-JOIN</span><span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、管道运算符： |</span><br><span class="line">有时候<span class="built_in">iex</span>并不会出现在开头，会与<span class="string">&quot;|&quot;</span>符号结合出现在末尾</span><br><span class="line">作用：将上一条命令的输出，作为下一条命令的输入</span><br><span class="line">例如：</span><br><span class="line">|.( <span class="variable">$eNv:COmsPEc</span>[<span class="number">4</span>,<span class="number">24</span>,<span class="number">25</span>]<span class="operator">-joiN</span><span class="string">&#x27;&#x27;</span>)</span><br><span class="line">| <span class="built_in">InvOkE-eXPREssiOn</span></span><br><span class="line"></span><br><span class="line">即：将前面经过混淆后的命令交由<span class="built_in">iex</span>来执行，在我们删除这样的<span class="built_in">iex</span>时，也要将管道运算符一同删除</span><br></pre></td></tr></table></figure><h3 id="2-1-2-PowerShell-and-some-flags"><a href="#2-1-2-PowerShell-and-some-flags" class="headerlink" title="2.1.2 PowerShell and some flags"></a>2.1.2 PowerShell and some flags</h3><p>用一个多重混淆的例子来了解PowerShell and some flags常见的混淆结合方式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe <span class="literal">-NoE</span> <span class="literal">-Nop</span> <span class="literal">-NonI</span> <span class="literal">-ExecutionPolicy</span> Bypass <span class="literal">-C</span> <span class="string">&quot;sal a New-Object;iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String(&#x27;RVZba95GEP0rkgnITqKwq73rSWnWCV+pksgyfTFGbIrBLr4E27QPTf97z5lVXEKQvDuXM2fOzKfvD39fPT5dX93eNk3Tf364P9zL8+vjAw6aI/x7ddysp8/9zfnVXdP9Vc4O5dvt6fjwce2armtOjt40F0/Pj4fPny6Pm8640bteK7Xg/2wGPFKvdchaxUlrv2nlNq15HlutdDEDrvSstVpxXfA+am1bmMDMLtXc4albM4xaBXotetCImnClacaEBWZwXwxzDAiIoCrCQ03wQG6bgWOUp4qLGSbP7K2xuEcE7XHvmRg2bnNxsqHYkFNckGlCxiWF0bnVudZ6xHcr/EoKSMwQxD0gjEZ44NVqZjjrl0QCAEClxQYU6YDJrZJLnFy2AfD06HTv7OLMkhypgpcdU0BtIJThalh4m9mGJVohKAVyBAxk3AG+QvmmN6BQtSSVjCA56QRnKuadkZbeZpg9iV0CeJQzX6zLkc1QS1RjQBABL347YjuCPevm6PJOZzZDqcSzEiSNRVpSiZ8igQGvHI8GpamBddEVT/bSIcTiNSRTAjunydAsWHLFMkdSyi7qIl0SP0iEVA30hPnmKZC4CFliAMLQ2pBKYnJR2JqSHEJQlZtS20ZFqp8SJBLr2qj6PSmlMVWtSlKKECH6QJKllLHeontkijqS8sks+rSlRMVMZtiskBCYy82VFY1erFUYqoeJAWbpeV/Loc6hFLZw1oOB6ZiQc2MlCXBsqe33wp0lBjtVqhyLnVksOkG5CirEDNuuKQQyxQjgkZOIVoAYq7JhuGHe6+OkTtbTJIvuEpMVqzcZokzYw8RExN96P0a/+ghKAgxVz4FL7b4BiouzU8XZ1XrMVHamWL/ZNNq4Op0xYk7NTk8OWOg0JsaszjI6AJ8AunhStwWKlCT5DBVESBzkRLVVkol+qyT31i3RzXVrxFE2AAYzRzvWgZv3eZprLvobGICRbFWpjIx7Y1Z23HJzqFU8k+jLolBLeVGQ7IrLQbBT6NwLSzDz3iuWsbKRk3E4rlsQVqgJDiyDWwqnIp5d9HxyYGSjaiZ12DO5LlQonbimlCZ2ieQzq3jUrak4LcCTuBJl+BifGfkq+veL/OlnhhgwfH5L1AtmhFsURXrGlVmfdu33sur8UnHrpS6lnNZo+v8nukTuFLVisAOLIiHS1CmYvU5GTUDbwjpwQilhkufRL+y2UpsFyqedo7bG4SiaSbiHDHIw2761+n0h9zWW5z4Xpfqfc7NK3ZA05Ig2+LjVhSKFw0hkvPPvQE7r0YWBYwP1YxuDqBZE5cDRQwEDxZjqD4IsSfTRIubmmXg1fo2yGX5KIluunAlbNFKZMu/7+Sjni49sl+gl4deJmwRyLD72FRlXHJpY9MBuz8iteqwHxQM8uqZ/+v7b4bnpFnm9PZx3uR7enDdd6fqnr7e8xg97v+IVh+PLYSuHcO8m+nyVQL283t48d3NXg3db96P5+OXstPxx3T98+/P0w/M/xxcfrsvj5cXh/vyyebWdNP82J82bo5fvitO7Bh8W7x9v3v/y8mHRdCdHP94dH3+6Ou9/3785mu71XT573Z28uy/z6YV5q/Xb4bL/9cvhvoP5fw==&#x27;),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()&quot;</span></span><br></pre></td></tr></table></figure><p>这其中的<code>powershell.exe -NoE -Nop -NonI -ExecutionPolicy Bypass -C</code> 就是指：</p><p>调用PowerShell，给它一些flags（标志）以确保它的执行，并提供要解码和执行的真实有效载荷</p><p>其中一些flags的含义是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-NoE</span></span><br><span class="line">运行命令后不退出，即创建一个进程并保持作为 powershell.exe 运行</span><br><span class="line"><span class="literal">-Nop</span></span><br><span class="line">即<span class="literal">-NoProfile</span>，不加载 PowerShell 配置文件</span><br><span class="line"><span class="literal">-NonI</span> </span><br><span class="line">即<span class="literal">-NonInteractive</span>，不创建交互式提示，即它运行命令而 PowerShell 窗口不会在用户屏幕上弹出一个持久终端</span><br><span class="line"><span class="literal">-ExecutionPolicy</span> Bypass</span><br><span class="line">跳过执行策略</span><br><span class="line"><span class="literal">-C</span> </span><br><span class="line">即- Command，接下来运行什么</span><br></pre></td></tr></table></figure><p>此部分允许 PowerShell 执行用户不可见的命令，并创建一个在命令执行后保持运行的进程。</p><p>对于这一部分，在解混淆时我们要将<code>~~powershell.exe -NoE -Nop -NonI -ExecutionPolicy Bypass -~~</code>删除。</p><p>剩下的部分，可以简写为</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sal</span> a <span class="built_in">New-Object</span>;<span class="built_in">iex</span>(a IO.StreamReader((a IO.Compression.DeflateStream([<span class="type">IO.MemoryStream</span>][<span class="type">Convert</span>]::FromBase64String(<span class="string">&#x27;redacted-base64-encoded-string&#x27;</span>),[<span class="type">IO.Compression.CompressionMode</span>]::Decompress)),[<span class="type">Text.Encoding</span>]::ASCII)).ReadToEnd()</span><br></pre></td></tr></table></figure><p>其中，<code>sal</code>是Set-Aliascmdlet的别名。<code>sal a New-Object</code>为<code>New-Object</code>创建一个快捷方式“a”，</p><p>使后面出现的<code>a IO.StreamReader</code>等价于<code>New-Object IO.StreamReader</code></p><p>之后通过iex执行payload，payload中的作用主要是将 base64 编码的字符串转换为内存流。</p><p>因此，我们要将这里的<code>~~iex~~</code>字符去除，这样就只剩下了：（简写）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sal</span> a <span class="built_in">New-Object</span>;(a IO.StreamReader((a IO.Compression.DeflateStream([<span class="type">IO.MemoryStream</span>][<span class="type">Convert</span>]::FromBase64String(<span class="string">&#x27;redacted-base64-encoded-string&#x27;</span>),[<span class="type">IO.Compression.CompressionMode</span>]::Decompress)),[<span class="type">Text.Encoding</span>]::ASCII)).ReadToEnd()</span><br></pre></td></tr></table></figure><p>直接运行，即可得到第一层混淆的结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell   <span class="literal">-NonIn</span>  <span class="literal">-NoPro</span>    <span class="string">&quot; &quot;</span> <span class="variable">$</span>( <span class="built_in">SEt-iTem</span> <span class="string">&#x27;vaRIablE:oFS&#x27;</span> <span class="string">&#x27;&#x27;</span> )<span class="string">&quot;+ [strING]( &#x27;35:65-100Q100M32Q109-117D108@116_105_112Q108!101a32D101M110S116a101:114!112_114Q105_115Q101!32:107!101Q121-119_111_114-100a115a10Q36_102M111M108:100@101@114D117:114D108Q32@61a32!34@104-116D116!112:115_58@47a47D98Q119@121Q97:55S55!46M115S104a97a114@101:112-111D105Q110M116!46Q99-111@109Q47S115:105S116!101:115D47@111:51-54Q53Q95@116-114:97-105-110M105Q110:103M47Q84_114Q97Q105a110Q105!110_103-34!10!10S10Q36@102_111-108D100@101!114Q32M61!32Q71_101!116a45D80S110Q80:70!111@108D100!101:114:32@45M85D114D108D32a36_102@111S108a100a101@114@85!114_108a10:36-102-105D108-101-115D32Q61M32a71M101S116M45D80D110Q80M80M114D111a112:101-114Q116-121M32M45_67!108Q105Q101-110:116D79a98a106a101S99:116D32:36@102a111D108!100a101:114M32a45!80-114D111!112@101M114Q116Q121D32-70S105D108:101M115@10!102:111@114_101Q97_99S104@32_40:36-70a105M108a101Q32S105S110-32_36D70M105-108Q101_115D41-10M123S10:9D10_9:119Q114a105!116M101S45@104@111a115:116M32:34@87a111@114Q107_105Q110D103a32:111:110S32Q36@40D36M102M105D108D101@46:110D97Q109M101a41_34@10D32_32@32:32_36!66:86S68M117M100-61a39!105_112a58M50a54S46S55D53a46_49:48S51D46M50M51@52Q39!10:9_36!105_116!101_109a32a61Q32_71@101_116D45_80@110_80_70a105D108_101Q32-45Q85M114-108:32!34Q47D84:114:97M105a110M105_110a103Q47Q36D40a36M102:105-108S101M46D110S97M109a101S41a34D32:45_65!115D76!105-115M116Q73M116M101_109S10_9@35Q73S116a115M32_105@110a32!116S104@101-114@101D32Q116_119a105Q99D101a32a98S101@99@97Q117M115M101D32-119_101M32!109D117-115D116S32_115D101:116Q32_116M97Q120M86_97_108!117:101S67M111S108@108:101-99-116Q105@111Q110Q10D9S83-101S116M45a80!110S80D76S105M115_116@73!116S101S109D32!45a76@105:115-116:32-34a84:114S97@105@110!105M110S103@34D32D45D73_100!101-110M116-105:116@121@32:36a105!116S101:109M46S73S68_32M45_86_97a108M117@101-115Q32!64@123a32_34Q84M97!120D75@101S121_119-111D114D100a34_32_61@32S36S84_101-115M116D44M32@36_84-101_115M116D44:32@36Q68D117_109S98@44@32a36a68-117@109a98S32a125M10M9-10-9:10a125:10&#x27; -spLIt &#x27;Q&#x27; -splIT&#x27;D&#x27; -spLiT &#x27;a&#x27;-sPlIt &#x27;S&#x27; -SPlIT &#x27;:&#x27;-sPlIt &#x27;!&#x27; -SPLIt&#x27;@&#x27; -sPLIt &#x27;-&#x27; -sPlit&#x27;M&#x27;-spLIt&#x27;_&#x27;| FOREach-objECt&#123;([Char][InT] <span class="variable">$_</span>) &#125; ) +&quot;</span><span class="variable">$</span>( <span class="built_in">SEt-iTEm</span>  <span class="string">&#x27;vAriABlE:oFS&#x27;</span> <span class="string">&#x27; &#x27;</span>)<span class="string">&quot;|.((GeT-VaRIablE &#x27;*mDR*&#x27;).naME[3,11,2]-JOIn&#x27;&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p>这是第二层混淆，可以看到这里使用PowerShell and some flags与iex（最后出现的<code>|.((GeT-VaRIablE &#39;*mDR*&#39;).naME[3,11,2]-JOIn&#39;&#39;)</code>）进行了结合。</p><p>因此我们只需将<code>~~powershell   -NonIn  -NoPro~~</code>和<code>~~|.((GeT-VaRIablE &#39;*mDR*&#39;).naME[3,11,2]-JOIn&#39;&#39;)~~</code>删除，之后注意到整体前后各多了一个双引号（”）字符，将最前和最后的双引号删除后，即可直接运行，得到结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Add multiple enterprise keywords</span></span><br><span class="line"><span class="variable">$folderurl</span> = <span class="string">&quot;https://bwya77.sharepoint.com/sites/o365_training/Training&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$folder</span> = <span class="built_in">Get-PnPFolder</span> <span class="literal">-Url</span> <span class="variable">$folderUrl</span></span><br><span class="line"><span class="variable">$files</span> = <span class="built_in">Get-PnPProperty</span> <span class="literal">-ClientObject</span> <span class="variable">$folder</span> <span class="literal">-Property</span> Files</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$File</span> <span class="keyword">in</span> <span class="variable">$Files</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">write-host</span> <span class="string">&quot;Working on <span class="variable">$</span>(<span class="variable">$file</span>.name)&quot;</span></span><br><span class="line">    <span class="variable">$BVDud</span>=<span class="string">&#x27;ip:26.75.103.234&#x27;</span></span><br><span class="line">        <span class="variable">$item</span> = <span class="built_in">Get-PnPFile</span> <span class="literal">-Url</span> <span class="string">&quot;/Training/<span class="variable">$</span>(<span class="variable">$file</span>.name)&quot;</span> <span class="literal">-AsListItem</span></span><br><span class="line">        <span class="comment">#Its in there twice because we must set taxValueCollection</span></span><br><span class="line">        <span class="built_in">Set-PnPListItem</span> <span class="literal">-List</span> <span class="string">&quot;Training&quot;</span> <span class="literal">-Identity</span> <span class="variable">$item</span>.ID <span class="literal">-Values</span> <span class="selector-tag">@</span>&#123; <span class="string">&quot;TaxKeyword&quot;</span> = <span class="variable">$Test</span>, <span class="variable">$Test</span>, <span class="variable">$Dumb</span>, <span class="variable">$Dumb</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h1><p>混淆工具：<a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></p><p>解混淆工具：</p><p><a href="https://www.secpulse.com/archives/117576.html">https://www.secpulse.com/archives/117576.html</a></p><p><a href="https://www.secpulse.com/archives/109912.html">https://www.secpulse.com/archives/109912.html</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1">https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-5.1</a></p><p><a href="https://threat.tevora.com/5-minute-forensics-decoding-powershell-payloads/">https://threat.tevora.com/5-minute-forensics-decoding-powershell-payloads/</a></p><p><a href="https://www.freebuf.com/articles/system/181697.html">https://www.freebuf.com/articles/system/181697.html</a></p><p><a href="https://www.jb51.net/article/53519.htm">https://www.jb51.net/article/53519.htm</a></p>]]></content>
    
    
    <summary type="html">PowerShell功能十分强大，其有很多优点：例如易于导入模块，能够访问核心API和远程命令，也正是由于这些优点使其成为攻击者执行无文件攻击的首选工具之一。</summary>
    
    
    
    <category term="PowerShell" scheme="http://example.com/categories/PowerShell/"/>
    
    
    <category term="PowerShell" scheme="http://example.com/tags/PowerShell/"/>
    
    <category term="反混淆" scheme="http://example.com/tags/%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu虚拟机实现主机代理</title>
    <link href="http://example.com/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/</id>
    <published>2021-10-19T08:01:18.000Z</published>
    <updated>2021-11-09T08:34:27.897Z</updated>
    
    <content type="html"><![CDATA[<p>实现在ubuntu虚拟机中，浏览器及终端两个方面的网络代理</p><span id="more"></span><h1 id="一、浏览器实现代理"><a href="#一、浏览器实现代理" class="headerlink" title="一、浏览器实现代理"></a>一、浏览器实现代理</h1><p>windows主机中</p><p><code>ipconfig</code></p><p>记住WLAN下的IPV4地址</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled.png"></p><p>在代理软件中开启局域网共享，并记住Http端口及Socks5端口号</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%201.png"></p><p>Ubuntu虚拟机中</p><p>之后在系统网络设置中，Network Proxy设置如下</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%202.png"></p><p>之后即可在虚拟机浏览器中访问Google等网站。</p><h1 id="二、终端实现代理"><a href="#二、终端实现代理" class="headerlink" title="二、终端实现代理"></a>二、终端实现代理</h1><p>先安装：</p><p><code>apt-get install proxychains</code></p><p>之后设置代理配置</p><p><code>gedit /etc/proxychains.conf</code></p><p>将最后一行socks4注释，加上socks5，并附上刚才的IP地址及端口号</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%203.png"></p><p>最后需要使用<code>find /usr/lib/ -name libproxychains.so.3 -print</code>命令输出路径</p><p>再执行<code>gedit /usr/bin/proxychains</code></p><p>将<code>export LD_PRELOAD=libproxychains.so.3</code>改为<code>export LD_PRELOAD=刚刚获得的路径</code></p><p>使用代理时只需在命令前加上<code>proxychains</code>即可</p><p>测试：</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%204.png"></p><p>附：命令行取消代理（有时可能会用到）</p><p><code>env | grep -i proxy</code>查看当前命令行代理设置</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%205.png"></p><p><code>unset HTTP_PROXY</code></p><p>注意大小写</p>]]></content>
    
    
    <summary type="html">实现Uubuntu虚拟机中，浏览器及终端两个方面的网络代理</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="代理" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
</feed>
