<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HotSpurzzZ</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-09T08:09:00.771Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>HotSpurzzZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shellphish-fuzzer环境搭建</title>
    <link href="http://example.com/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-11-09T08:00:00.000Z</published>
    <updated>2021-11-09T08:09:00.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shellphish-fuzzer环境搭建"><a href="#shellphish-fuzzer环境搭建" class="headerlink" title="shellphish-fuzzer环境搭建"></a>shellphish-fuzzer环境搭建</h1><p>搭建shellphish-fuzzer环境，用于python调用AFL<br>环境：Docker—ubuntu18.04<br>python版本：3.6.9</p><span id="more"></span><p>注：由于个人网络问题，github源使用的<code>https://github.com.cnpmjs.org</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">    apt-get upgrade -y &amp;&amp; \</span><br><span class="line">    apt-get autoremove -y &amp;&amp; \</span><br><span class="line">    apt-get install -y \</span><br><span class="line">        curl \</span><br><span class="line">        gdb \</span><br><span class="line">        wget \</span><br><span class="line">        git \</span><br><span class="line">        vim</span><br></pre></td></tr></table></figure><p>换源：</p><p><code>vim /etc/apt/sources.list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>shellphish-fuzzer的安装：</p><p><code>apt-get install build-essential gcc-multilib libtool automake autoconf bison debootstrap debian-archive-keyring libtool-bin</code></p><p><code>apt-get build-dep qemu</code></p><p>由于没有pip，先安装pip3：</p><p><code>apt-get install python3-pip</code></p><p>安装angr</p><p><code>pip3 install angr</code></p><p>安装driller</p><p><code>pip3 install git+https://github.com.cnpmjs.org/angr/tracer</code></p><p><code>pip3 install git+https://github.com.cnpmjs.org/shellphish/driller</code></p><p>安装afl（可选）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir afl-latest</span><br><span class="line"><span class="built_in">cd</span> afl-latest</span><br><span class="line">wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz</span><br><span class="line">tar xf afl-latest.tgz</span><br><span class="line"><span class="built_in">cd</span> afl-2.52b</span><br><span class="line">make</span><br><span class="line"><span class="built_in">cd</span> qemu_mode</span><br><span class="line">wget -O patches/memfd.diff https://salsa.debian.org/qemu-team/qemu/raw/ubuntu-bionic-2.11/debian/patches/ubuntu/lp1753826-memfd-fix-configure-test.patch</span><br><span class="line">sed -i <span class="string">&#x27;/syscall.diff/a patch -p1 &lt;../patches/memfd.diff || exit 1&#x27;</span> build_qemu_support.sh</span><br><span class="line">./build_qemu_support.sh</span><br></pre></td></tr></table></figure><p>安装shellphish-afl</p><p><code>pip3 install git+https://github.com.cnpmjs.org/shellphish/shellphish-afl</code></p><p>但我使用这种方法会报错</p><p>于是我选择clone下来，执行setup.py</p><p><code>git clone[https://github.com.cnpmjs.org/shellphish/shellphish-afl.git](https://github.com.cnpmjs.org/shellphish/shellphish-afl.git)</code></p><p><code>cd shellphish-afl/</code></p><p><code>python3 [setup.py](http://setup.py/) install</code></p><p>安装fuzzer</p><p><code>pip3 install git+https://github.com.cnpmjs.org/shellphish/fuzzer</code></p><p>测试：</p><p><code>shellphuzz --help</code></p><p><img src="/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Untitled.png"></p><p><img src="/2021/11/09/shellphish-fuzzer%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Untitled%201.png"></p><p>参考链接：</p><p><a href="https://github.com/shellphish/fuzzer">https://github.com/shellphish/fuzzer</a></p><p><a href="https://github.com/shellphish/shellphish-afl">https://github.com/shellphish/shellphish-afl</a></p><p><a href="https://blog.grimm-co.com/2020/05/guided-fuzzing-with-driller.html">https://blog.grimm-co.com/2020/05/guided-fuzzing-with-driller.html</a></p><p>附Dockerfile：</p><p><a href="Dockerfile.txt">Dockerfile</a></p>]]></content>
    
    
    <summary type="html">搭建shellphish-fuzzer环境，用于python调用AFL</summary>
    
    
    
    <category term="Fuzzing" scheme="http://example.com/categories/Fuzzing/"/>
    
    
    <category term="Fuzz" scheme="http://example.com/tags/Fuzz/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="AEG" scheme="http://example.com/tags/AEG/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu虚拟机实现主机代理</title>
    <link href="http://example.com/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/</id>
    <published>2021-10-19T08:01:18.000Z</published>
    <updated>2021-11-09T08:08:53.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu虚拟机使用主机代理实现翻墙"><a href="#ubuntu虚拟机使用主机代理实现翻墙" class="headerlink" title="ubuntu虚拟机使用主机代理实现翻墙"></a>ubuntu虚拟机使用主机代理实现翻墙</h1><p>实现在ubuntu虚拟机中，浏览器及终端两个方面的网络代理</p><span id="more"></span><h1 id="一、浏览器实现代理"><a href="#一、浏览器实现代理" class="headerlink" title="一、浏览器实现代理"></a>一、浏览器实现代理</h1><p>windows主机中</p><p><code>ipconfig</code></p><p>记住WLAN下的IPV4地址</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled.png"></p><p>在代理软件中开启局域网共享，并记住Http端口及Socks5端口号</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%201.png"></p><p>Ubuntu虚拟机中</p><p>之后在系统网络设置中，Network Proxy设置如下</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%202.png"></p><p>之后即可在虚拟机浏览器中访问Google等网站。</p><h1 id="二、终端实现代理"><a href="#二、终端实现代理" class="headerlink" title="二、终端实现代理"></a>二、终端实现代理</h1><p>先安装：</p><p><code>apt-get install proxychains</code></p><p>之后设置代理配置</p><p><code>gedit /etc/proxychains.conf</code></p><p>将最后一行socks4注释，加上socks5，并附上刚才的IP地址及端口号</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%203.png"></p><p>最后需要使用<code>find /usr/lib/ -name libproxychains.so.3 -print</code>命令输出路径</p><p>再执行<code>gedit /usr/bin/proxychains</code></p><p>将<code>export LD_PRELOAD=libproxychains.so.3</code>改为<code>export LD_PRELOAD=刚刚获得的路径</code></p><p>使用代理时只需在命令前加上<code>proxychains</code>即可</p><p>测试：</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%204.png"></p><p>附：命令行取消代理（有时可能会用到）</p><p><code>env | grep -i proxy</code>查看当前命令行代理设置</p><p><img src="/2021/10/19/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%9E%E7%8E%B0%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/Untitled%205.png"></p><p><code>unset HTTP_PROXY</code></p><p>注意大小写</p>]]></content>
    
    
    <summary type="html">实现在ubuntu虚拟机中，浏览器及终端两个方面的网络代理</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="代理" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
</feed>
